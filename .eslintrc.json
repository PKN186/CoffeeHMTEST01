// eslint.config.mjs
import eslint from '@eslint/js';
import tseslint from 'typescript-eslint';
import reactPlugin from 'eslint-plugin-react';
import reactHooksPlugin from 'eslint-plugin-react-hooks';
import prettierRecommended from 'eslint-plugin-prettier/recommended';
import globals from 'globals';

export default tseslint.config(
  // Global ignore patterns
  {
    ignores: [
      'dist/',
      'node_modules/',
      'build/',
      '**/*.d.ts',
      'coverage/',
      'public/',
      '.next/',
      'out/'
    ],
  },

  // Base configurations
  eslint.configs.recommended,
  prettierRecommended,

  // JavaScript files configuration
  {
    files: ['**/*.{js,mjs,cjs,jsx}'],
    languageOptions: {
      globals: {
        ...globals.browser,
        ...globals.node,
        ...globals.es2021,
      },
      ecmaVersion: 'latest',
      sourceType: 'module',
    },
    plugins: {
      react: reactPlugin,
      'react-hooks': reactHooksPlugin,
    },
    rules: {
      // Code quality rules
      'camelcase': 'error',
      'eqeqeq': 'error',
      'curly': 'error',
      'no-implicit-globals': 'error',
      'no-console': ['error', { allow: ['warn', 'error'] }],
      
      // Style rules
      'semi': ['error', 'always'],
      'quotes': ['warn', 'single'],
      'indent': ['error', 2],
      'keyword-spacing': ['warn', { before: true, after: true }],
      'no-multiple-empty-lines': ['warn', { max: 1, maxEOF: 0 }],
      
      // React rules
      'react/jsx-uses-react': 'warn',
      'react/react-in-jsx-scope': 'off', // Not needed in React 17+
      'react/button-has-type': 'warn',
      'react/prop-types': 'off', // Using TypeScript instead
      'react/no-array-index-key': 'error',
      'react/display-name': 'error',
      'react/no-children-prop': 'error',
      'react/jsx-no-bind': 'error',
      
      // React Hooks rules
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'error',
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  },

  // TypeScript files configuration
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      ...tseslint.configs.recommended,
      ...tseslint.configs.stylistic,
    ],
    languageOptions: {
      parser: tseslint.parser,
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        ecmaFeatures: {
          jsx: true,
        },
      },
      globals: {
        ...globals.browser,
        ...globals.node,
        ...globals.es2021,
      },
    },
    plugins: {
      '@typescript-eslint': tseslint.plugin,
      react: reactPlugin,
      'react-hooks': reactHooksPlugin,
    },
    rules: {
      // TypeScript specific rules
      '@typescript-eslint/no-unused-vars': 'error',
      '@typescript-eslint/explicit-function-return-type': 'off',
      '@typescript-eslint/explicit-module-boundary-types': 'off',
      '@typescript-eslint/no-explicit-any': 'warn',
      '@typescript-eslint/prefer-const': 'error',
      '@typescript-eslint/no-floating-promises': 'error',
      
      // Override base rules for TypeScript
      'camelcase': 'off',
      '@typescript-eslint/naming-convention': [
        'error',
        {
          selector: 'variable',
          format: ['camelCase', 'PascalCase', 'UPPER_CASE'],
        },
        {
          selector: 'function',
          format: ['camelCase', 'PascalCase'],
        },
        {
          selector: 'typeLike',
          format: ['PascalCase'],
        },
      ],
      
      // Code quality
      'eqeqeq': 'error',
      'curly': 'error',
      'no-implicit-globals': 'error',
      'no-console': ['error', { allow: ['warn', 'error'] }],
      
      // Style
      'semi': 'off',
      '@typescript-eslint/semi': ['error', 'always'],
      'quotes': 'off',
      '@typescript-eslint/quotes': ['warn', 'single'],
      'indent': 'off',
      '@typescript-eslint/indent': ['error', 2],
      'keyword-spacing': ['warn', { before: true, after: true }],
      'no-multiple-empty-lines': ['warn', { max: 1, maxEOF: 0 }],
      
      // React rules for TypeScript
      'react/jsx-uses-react': 'warn',
      'react/react-in-jsx-scope': 'off',
      'react/button-has-type': 'warn',
      'react/prop-types': 'off',
      'react/no-array-index-key': 'error',
      'react/display-name': 'error',
      'react/no-children-prop': 'error',
      'react/jsx-no-bind': 'error',
      'react/jsx-key': 'error',
      'react/no-unstable-nested-components': 'error',
      
      // React Hooks
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'error',
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  },

  // Test files configuration
  {
    files: ['**/*.test.{js,jsx,ts,tsx}', '**/*.spec.{js,jsx,ts,tsx}'],
    languageOptions: {
      globals: {
        ...globals.jest,
        ...globals.browser,
      },
    },
    rules: {
      'no-console': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
    },
  }
);
